
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> source(paste0("/home/htran/Projects/farhia_project/rscript/pipeline/utils/normalize_utils.R"))
Warning message:
replacing previous import ‘vctrs::data_frame’ by ‘tibble::data_frame’ when loading ‘dplyr’ 
> # BiocManager::install("batchelor")
> library(batchelor)
> library(BiocSingular)
> library(dplyr)
> ## SEG list in ensemblGene ID
> data("segList_ensemblGeneID", package = "scMerge") 
> 
> input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
> output_dir <- paste0(input_dir,'rnaseq_v6/normalization_evaluation_v1/')
> dir.create(output_dir)
Warning message:
In dir.create(output_dir) :
  '/home/htran/storage/datasets/drug_resistance/rna_results/rnaseq_v6/normalization_evaluation_v1' already exists
> datatag <- 'SA609'
> sce_fn <- paste0(input_dir,'rnaseq_v6/',datatag,'-v6/total_sce_treated.rds')
> sce <- readRDS(sce_fn)
> dim(sce)
[1] 12248 10540
> 
> 
> # print("Cosine normalization as logcounts input")
> # cosdata <- cosineNorm(as.matrix(log2(counts(sce)+1)), BPPARAM = SerialParam())
> # colnames(cosdata) <- colnames(sce)
> # rownames(cosdata) <- rownames(sce)
> # logcounts(sce) <- as.matrix(cosdata)
> 
> print("Simple logcounts input")
[1] "Simple logcounts input"
> logcounts(sce) <- as.matrix(log2(counts(sce)+1))
>   
> 
> metacells_fn <-  paste0(input_dir,'SA609_rna/snakemake_10x/SA609_10x.csv')
> sample_df <- read.csv(metacells_fn)
> # head(sample_df)
> rownames(sample_df) <- sample_df$mouse_id
> print(dim(sample_df))
[1] 15 11
> sample_df <- sample_df %>%
+               dplyr::select(mouse_id, batch_info) %>%
+               dplyr::rename(batch=batch_info)
> sce$batch <- 'None'
> # metacells <- as.data.frame(colData(sce))
> # metacells <- metacells %>% left_join(sample_df, by=c("sample"="mouse_id"))
> # colData(sce) <- as.matrix(metacells)
> # sapply(sample_df$mouse_id, function(s) {
> #   sce[,sce$sample==s]$batch <- sample_df[s,'batch']
> # })
> sce$batch <- sample_df[sce$sample,'batch']
> summary(as.factor(sce$batch))
CHIP0063_SA CHIP0068_SA CHIP0069_SA    CHIP0146    CHIP0150    CHIP0152 
          0           0         600           0        2419        3047 
   CHIP0163    CHIP0172    CHIP0181    CHIP0208 
       1934           0        2540           0 
> kmeansK_params <- c()
> for(b in unique(sce$batch)){
+   # sce_tmp <- sce[,sce$batch==b]
+   # length(unique(sce_tmp$clone))
+   kmeansK_params <- c(kmeansK_params, length(unique(sce[,sce$batch==b]$clone)))
+ }
> 
> t1 = Sys.time()
> 
> scMerge_res <- scMerge::scMerge(
+   sce_combine = sce, 
+   ctl = segList_ensemblGeneID$human$human_scSEG,
+   assay_name = "scMerge_fast",
+   replicate_prop = 0.4,
+   cell_type = NULL, # unsupervised
+   kmeansK = kmeansK_params,
+   verbose=T,
+   BSPARAM = IrlbaParam(), 
+   svd_k = 20)
Performing unsupervised scMerge with: 
 1. No cell type information 
 2. Cell type indices not relevant here 
 3. Mutual nearest neighbour matching 
 4. No supplied marker and no supplied marker_list for MNN clustering 
    Finding Highly Variable Genes for clustering 
    1517 HVG were found 
 5. PCA and Kmeans clustering will be performed on each batch 
 6. Create Mutual Nearest Clusters. Preview cells-cell_type matching output matrix: 
   group batch cluster
1      2     1       1
2      4     1       2
3      5     1       3
4      1     1       4
5      6     2       1
6      7     2       2
7      3     2       3
8      1     2       4
9      3     3       1
10     1     3       2
11     2     4       1
12     1     5       1
Dimension of the replicates mapping matrix: 
[1] 10540  6336
Step 2: Performing RUV normalisation. This will take minutes to hours. 

scMerge complete!
> 
> t2 = Sys.time()
> print(t2-t1)
Time difference of 10.86342 mins
> 
> 
> saveRDS(scMerge_res, file=paste0(output_dir,datatag,"_scMerge_correction_without_cosine.rds"))
> 
> 
> t <- assay(scMerge_res, "scMerge_fast")
> print(max(t))
[1] 9.831802
> print(min(t))
[1] -5.177822
> 
> # Get PCA coordinates on normalized data
> # normalized_data <- as.data.frame(scMerge_res@assays$data$scMerge_res) 
> # normalized_data_t <- t(normalized_data)
> # pca_mat <- stats::prcomp(normalized_data_t, rank = npcs, retx=TRUE, center = TRUE, scale. = FALSE)
> # pca_mat <- as.data.frame(pca_mat$x)
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
784.192  16.911 805.218 
