
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> source(paste0("/home/htran/Projects/farhia_project/rscript/pipeline/utils/normalize_utils.R"))
Warning message:
replacing previous import ‘vctrs::data_frame’ by ‘tibble::data_frame’ when loading ‘dplyr’ 
> # BiocManager::install("batchelor")
> library(batchelor)
> library(BiocSingular)
> library(dplyr)
> library(Matrix)

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DelayedArray)
> 
> ## SEG list in ensemblGene ID
> data("segList_ensemblGeneID", package = "scMerge") 
> 
> input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
> output_dir <- paste0(input_dir,'rnaseq_v6/normalization_evaluation/')
> dir.create(output_dir)
Warning message:
In dir.create(output_dir) :
  '/home/htran/storage/datasets/drug_resistance/rna_results/rnaseq_v6/normalization_evaluation' already exists
> datatag <- 'SA609'
> # sce_fn <- paste0(input_dir,'rnaseq_v6/',datatag,'-v6/total_sce_treated.rds')
> ref_dif <- '/home/htran/storage/datasets/drug_resistance/rna_results/biodatabase/'
> cancer_ref_genes_fn <- paste0(ref_dif,'Behan_CFgenes.csv')
> cancer_ref_genes_df <- read.csv(cancer_ref_genes_fn, stringsAsFactors=F, check.names = F)
> 
> base_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
> cosmic_genes <- read.table(paste0(base_dir, 'biodatabase/oncogene_cosmic.txt'),sep='\t',header = T, check.names = F, stringsAsFactors = F)
> ref_cis_genes <- read.table(paste0(base_dir, 'biodatabase/cisplatin_resistance_genes.txt'),sep='\t',header = T, check.names = F, stringsAsFactors = F)
> dim(cosmic_genes)
[1] 125   1
> dim(ref_cis_genes)
[1] 96  1
> dim(cancer_ref_genes_df)
[1] 553   2
> 
> 
> 
> 
> 
> sce_fn <- paste0(input_dir,'rnaseq_v6/',datatag,'-v6/total_sce.rds')
> sce <- readRDS(sce_fn)
> dim(sce)
[1] 33421 33881
> 
> 
> meta_genes <- data.frame(ens_gene=rowData(sce)$ID, gene_symb=rowData(sce)$Symbol,
+                          row.names = rowData(sce)$ID, stringsAsFactors = F)
> cosmic_genes_ls <- meta_genes[meta_genes$gene_symb %in% cosmic_genes$Gene_Symbol,'ens_gene']
> ref_cis_genes_ls <- meta_genes[meta_genes$gene_symb %in% ref_cis_genes$gene_symbol,'ens_gene']
> 
> 
> 
> scSEG_df <- read.csv(paste0(output_dir,'segIndx_filtered_80.csv'),check.names = F, stringsAsFactors = F)
> dim(scSEG_df)
[1] 1519    8
> colnames(scSEG_df)
[1] "segIdx"    "rho"       "sigma"     "mu"        "mu.scaled" "zero"     
[7] "gene_ens"  "gene_symb"
> # View(head(scSEG_df))
> summary(scSEG_df$segIdx)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6236  0.6402  0.6569  0.6569  0.6736  0.6902 
> scSEG_df <- scSEG_df %>%
+   dplyr::filter(segIdx >= median(segIdx))
> scSEG_df <- scSEG_df[order(scSEG_df$segIdx,decreasing = T),]  
> ntop <- 300
> if(ntop>nrow(scSEG_df)){
+   ntop <- nrow(scSEG_df)
+ }
> scSEG_df <- scSEG_df[1:ntop,]
> dim(scSEG_df)
[1] 300   8
> # View(head(scSEG_df))
> stable_genes <- intersect(scSEG_df$gene_ens, rownames(sce))
> print(length(stable_genes))
[1] 300
> # Get number of highly variable features
> sce_seurat <- readRDS(paste0(output_dir,'sctransform_normalized.rds')) #seurat_normalized.rds
> zero_cbind1 <- DelayedArray::rowMeans(assay(sce_seurat, 'counts') == 0)
> cut_off_overall <- 0.025
> print(max(zero_cbind1))
[1] 0.9998819
> print(min(zero_cbind1))
[1] 0
> sce_seurat <- sce_seurat[names(zero_cbind1[zero_cbind1 <= (1 - cut_off_overall)]), ]
> print(dim(sce_seurat))
[1] 13913 33881
> 
> srt <- Seurat::as.Seurat(sce_seurat, counts = "counts", data = "logcounts")
> srt <- FindVariableFeatures(object = srt, verbose = FALSE, selection.method = "vst", nfeatures = 6500)
> var_genes <- VariableFeatures(object = srt)
> print(paste0('Nb var genes: ',length(var_genes)))
[1] "Nb var genes: 6500"
> 
> # var_genes <- union(segList_ensemblGeneID$human$human_scSEG, var_genes)
> var_genes <- union(stable_genes, var_genes)
> var_genes <- union(cosmic_genes_ls, var_genes)
> var_genes <- union(ref_cis_genes_ls, var_genes)
> var_genes <- union(cancer_ref_genes_df$ensemble_id, var_genes)
> var_genes <- intersect(var_genes, rownames(sce))
> print(length(var_genes))
[1] 7151
> rm(sce_seurat)
> rm(srt)
> sce <- sce[var_genes,]
> # print("Cosine normalization as logcounts input")
> # cosdata <- cosineNorm(as.matrix(log2(counts(sce)+1)), BPPARAM = SerialParam())
> # colnames(cosdata) <- colnames(sce)
> # rownames(cosdata) <- rownames(sce)
> # logcounts(sce) <- as.matrix(cosdata)
> 
> print("Simple logcounts input")
[1] "Simple logcounts input"
> logcounts(sce) <- as.matrix(log2(counts(sce)+1))
> print(dim(sce))
[1]  7151 33881
> 
> metacells_fn <-  paste0(input_dir,'SA609_rna/snakemake_10x/SA609_10x.csv')
> sample_df <- read.csv(metacells_fn)
> # head(sample_df)
> rownames(sample_df) <- sample_df$mouse_id
> print(dim(sample_df))
[1] 15 11
> sample_df <- sample_df %>%
+   dplyr::select(mouse_id, batch_info) %>%
+   dplyr::rename(batch=batch_info)
> sce$batch <- 'None'
> # metacells <- as.data.frame(colData(sce))
> # metacells <- metacells %>% left_join(sample_df, by=c("sample"="mouse_id"))
> # colData(sce) <- as.matrix(metacells)
> # sapply(sample_df$mouse_id, function(s) {
> #   sce[,sce$sample==s]$batch <- sample_df[s,'batch']
> # })
> sce$batch <- sample_df[sce$sample,'batch']
> summary(as.factor(sce$batch))
CHIP0063_SA CHIP0068_SA CHIP0069_SA    CHIP0146    CHIP0150    CHIP0152 
        274        4869         600        2773        5031        4891 
   CHIP0163    CHIP0172    CHIP0181    CHIP0208 
       4306        4193        5168        1776 
> kmeansK_params <- c()
> for(b in unique(sce$batch)){
+   # sce_tmp <- sce[,sce$batch==b]
+   # length(unique(sce_tmp$clone))
+   kmeansK_params <- c(kmeansK_params, length(unique(sce[,sce$batch==b]$clone)))
+ }
> 
> print(kmeansK_params)
 [1] 3 5 4 7 3 4 1 5 1 3
> 
> assay(sce, "counts") = as(counts(sce), "dgeMatrix")
> assay(sce, "logcounts") = as(logcounts(sce), "dgeMatrix")
> 
> t1 = Sys.time()
> #segList_ensemblGeneID$human$human_scSEG,
> scMerge_res <- scMerge::scMerge(
+   sce_combine = sce, 
+   ctl = stable_genes,  
+   assay_name = "scMerge_fast",
+   replicate_prop = 0.4,
+   cell_type = NULL, # unsupervised
+   kmeansK = kmeansK_params,
+   verbose=T,
+   BSPARAM = IrlbaParam(), 
+   svd_k = 20)
Automatically removing 0 cells and 3 genes that are all zeroes in the data
Performing unsupervised scMerge with: 
 1. No cell type information 
 2. Cell type indices not relevant here 
 3. Mutual nearest neighbour matching 
 4. No supplied marker and no supplied marker_list for MNN clustering 
    Finding Highly Variable Genes for clustering 
    1131 HVG were found 
 5. PCA and Kmeans clustering will be performed on each batch 
 6. Create Mutual Nearest Clusters. Preview cells-cell_type matching output matrix: 
   group batch cluster
1      3     1       1
2      2     1       2
3      1     1       3
4      1     2       1
5      2     2       2
6      4     2       3
7      5     2       4
8      1     2       5
9      6     3       1
10     1     3       2
11     1     3       3
12     2     3       4
13     2     4       1
14     1     4       2
15     7     4       3
16     8     4       4
17     9     4       5
18    10     4       6
19     2     4       7
20     2     5       1
21    11     5       2
22     1     5       3
23     2     6       1
24    12     6       2
25     1     6       3
26    13     6       4
27     1     7       1
28     2     8       1
29    14     8       2
30    15     8       3
31    16     8       4
32     1     8       5
33     1     9       1
34     2    10       1
35     1    10       2
36     1    10       3
Dimension of the replicates mapping matrix: 
[1] 33881 20358
Step 2: Performing RUV normalisation. This will take minutes to hours. 

Killed
