
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


[Previously saved workspace restored]

During startup - Warning message:
replacing previous import ‘vctrs::data_frame’ by ‘tibble::data_frame’ when loading ‘dplyr’ 
> suppressPackageStartupMessages({
+   require("optparse")
+   require("scater")
+   # require("argparse")
+   require("tidyr")
+   require("SingleCellExperiment")
+   require("stringr")
+   require("scran")
+   require("Seurat")
+   require("data.table")
+   require("clusterProfiler")
+   require("org.Hs.eg.db")
+   require("fgsea")
+   require("DOSE")
+   # require("enrichplot")
+   require("ggplot2")
+   require("ComplexHeatmap")
+   require("annotables")
+   require("dplyr")
+   require("edgeR")
+   # require("grid")
+   
+ })
> script_dir <- '/home/htran/Projects/farhia_project/rscript/pipeline'
> source(paste0(script_dir, "/utils/deg_utils.R"))
> 
> 
> 
> 
> 
> edgeR_DE_analysis_by_clones_samples <- function(pair_groups_fn, 
+                                                 sce_fn, output_file, datatag='SA', 
+                                                 min_features=1500, min_pct=0.1){
+   pair_groups <- read.csv(pair_groups_fn, header=T, check.names=F)
+   observed_pair_groups <- pair_groups[pair_groups$datatag==datatag,'desc']
+   rownames(pair_groups) <- pair_groups$desc
+   print("Number of pair comparison: ")
+   print(length(observed_pair_groups))
+   if(length(observed_pair_groups)==0){
+     stop("DEBUG: No comparison to do, double check input setting")
+   }
+  
+   save_dir <- paste0(dirname(output_file),'/')
+   if (!file.exists(save_dir)){
+     dir.create(save_dir, recursive=T)
+   }
+   
+   sce <- readRDS(sce_fn)
+   print("Initialized sce")
+   print(dim(sce))
+   print(summary(as.factor(sce$clone)))
+   print(summary(as.factor(sce$sample)))
+   mito_genes <- str_detect(rowData(sce)$Symbol, "^MT\\-")
+   sum(mito_genes==TRUE)
+ 
+   ribo_genes <- str_detect(rowData(sce)$Symbol, "^RP(L|S)")  # or ^RP[L|S]?
+   sum(ribo_genes==TRUE)
+   sce <- sce[(!mito_genes) & (!ribo_genes), ]
+   print("Observed sce: ")
+   print(paste0('Removing mito and ribo genes: ',dim(sce)[1],'_',dim(sce)[2]))
+   
+   
+   meta_data <- as.data.frame(colData(sce))
+   # summary(as.factor(meta_data$clone))
+   
+   for(de in observed_pair_groups){
+     cells_use_g1 <- rownames(meta_data)[meta_data$clone==pair_groups[de,'clone1'] & meta_data$sample==pair_groups[de,'sample1']]
+     cells_use_g2 <- rownames(meta_data)[meta_data$clone==pair_groups[de,'clone2'] & meta_data$sample==pair_groups[de,'sample2']]
+     
+     
+     if(length(cells_use_g1) < 100 || length(cells_use_g2) < 100){
+       print("There are no cells or small nb cells 
+             only which satisfy the input condition ")
+       print(paste0("\n Observed clones: ",pair_groups[de,'clone1'],' vs ',pair_groups[de,'clone2'], 
+                    "  nb cells in ",pair_groups[de,'clone1'], ":",length(cells_use_g1),
+                    "  nb cells in ",pair_groups[de,'clone2'], ":",length(cells_use_g2)))
+       
+     } else{
+       save_dir_pw <- paste0(save_dir,de,"/")
+       if (!file.exists(save_dir_pw)){
+         dir.create(save_dir_pw, recursive = T)
+       }
+       cells_use <- c(cells_use_g1, cells_use_g2)
+       # cells_use <- rownames(meta_data)
+       cat("\n DE analysis ", file = paste0(save_dir_pw,"de_analysis_log.txt"))
+       print(length(cells_use))
+       cat(paste0("\n Observed clones: ",pair_groups[de,'clone1'],' vs ',pair_groups[de,'clone2'], 
+                  "  nb cells in ",pair_groups[de,'clone1'], ":",length(cells_use_g1),
+                  "  nb cells in ",pair_groups[de,'clone2'], ":",length(cells_use_g2)), 
+           file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       
+       sce_tmp <- sce[,cells_use]
+       print(dim(sce_tmp))
+       pair_groups[de,'nbcells_g1'] <- length(cells_use_g1)
+       pair_groups[de,'nbcells_g2'] <- length(cells_use_g2)
+       
+       
+       # Similar to findMarkers func in Seurat, only test genes that are detected in a minimum fraction 
+       # of min.pct cells in either of the two populations. Meant to speed up the function
+       # by not testing genes that are very infrequently expressed. Default is 0.1
+       
+       zero_g1 <- DelayedArray::rowMeans(assay(sce_tmp[,sce_tmp$clone==as.character(pair_groups[de,'clone1'])], "counts") == 0)
+       obs_genes1 <- names(zero_g1[zero_g1 <= (1 - min_pct)])
+       print(length(obs_genes1))
+       zero_g2 <- DelayedArray::rowMeans(assay(sce_tmp[,sce_tmp$clone==as.character(pair_groups[de,'clone2'])], "counts") == 0)
+       obs_genes2 <- names(zero_g2[zero_g2 <= (1 - min_pct)])
+       print(length(obs_genes2))
+       sce_tmp <- sce_tmp[intersect(obs_genes1, obs_genes2),]
+       cat("\n Filtering by pct minimum fraction genes:\n ",file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       cat(dim(sce_tmp),file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       sce_tmp <- sce_tmp[, sce_tmp$total_features_by_counts > min_features]
+       cat("\n Filtering by total_features_by_counts greater than 1500:\n ",file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       cat(dim(sce_tmp),file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       sce_tmp$clone <- ifelse(sce_tmp$clone==as.character(pair_groups[de,'clone1']),paste0("2_",sce_tmp$clone),paste0("1_",sce_tmp$clone))
+       cat(summary(as.factor(sce_tmp$clone)),file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       
+       minLogFC <- 0.25
+       pValueThrs <- 0.05
+       de_genes <- edgeR_de(sce_tmp, save_dir_pw)
+       
+       de_genes <- de_genes[abs(de_genes$logFC)>minLogFC,]
+       cat(nrow(de_genes),file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       # Plot DE genes
+       plttitle <- paste0(pair_groups[de,'datatag'],":  ",pair_groups[de,'clone1']," versus ",pair_groups[de,'clone2'])
+       nbtopup <- 30
+       nbtopdown <- 30
+       markers_ls_upreg <- de_genes[de_genes$logFC>minLogFC,]
+       markers_ls_upreg <- markers_ls_upreg[order(markers_ls_upreg$logFC,decreasing = T),] 
+       cat(paste0('\n Nb resistant genes: ', nrow(markers_ls_upreg)),file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       pair_groups[de,'resistant_genes'] <- nrow(markers_ls_upreg)
+      
+       # dim(markers_ls_upreg)
+       if(nrow(markers_ls_upreg) < nbtopup){
+         nbtopup <- nrow(markers_ls_upreg)
+       }
+       markers_ls_upreg <- markers_ls_upreg[1:nbtopup,]
+       
+       # Get top down-regulated genes
+       markers_ls_downreg <- de_genes[de_genes$logFC<(-minLogFC),]
+       markers_ls_downreg <- markers_ls_downreg[order(markers_ls_downreg$logFC,decreasing = F),] 
+       cat(paste0('\n Nb sensitive genes: ', nrow(markers_ls_downreg)),file = paste0(save_dir_pw,"de_analysis_log.txt"), append = TRUE)
+       pair_groups[de,'sensitive_genes'] <- nrow(markers_ls_downreg)
+       # dim(markers_ls_downreg)
+       if(nrow(markers_ls_downreg) < nbtopdown){
+         nbtopdown <- nrow(markers_ls_downreg)
+       }
+       markers_ls_downreg <- markers_ls_downreg[1:nbtopdown,]
+       topGenes <- c(markers_ls_upreg$gene_symbol,markers_ls_downreg$gene_symbol)
+       # rownames(markers_ls_tmp) <- markers_ls_tmp$gene_symb
+       plot_DE_genes_edgeR(de_genes, topGenes, nrow(de_genes), 
+                           0.01, 0.25, plttitle, save_dir_pw, legendVisible=F)
+     }  
+   }
+   
+   
+   write.csv(pair_groups,file=pair_groups_fn, quote=F, row.names=F)
+ }
> 
> # datatag <- 'SA609'
> # input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results'
> # results_10x_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/rnaseq_v6/SA609-v6'
> # output_file <- paste0(input_dir,'/SA609_rna/deg_analysis/SA609_deg_pathway.rds')
> # pair_groups_fn <- paste0(input_dir,'/SA609_rna/deg_analysis/pair_groups.csv')
> # sce_fn <- paste0(results_10x_dir,'/total_sce_clones.rds')
> # edgeR_DE_analysis_by_clones_samples(pair_groups_fn, sce_fn, output_file, datatag, 1500, 0.1)
> 
> 
> input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results'
> datatag <- 'SA1035'
> results_10x_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/rnaseq_v6/SA1035-v6'
> output_file <- paste0(input_dir,'/',datatag,'_rna/deg_analysis/',datatag,'_deg_pathway.rds')
> pair_groups_fn <- paste0(input_dir,'/SA609_rna/deg_analysis/pair_groups.csv')
> sce_fn <- paste0(results_10x_dir,'/total_sce_clones.rds')
> edgeR_DE_analysis_by_clones_samples(pair_groups_fn, sce_fn, output_file, datatag, 1500, 0.1)
[1] "Number of pair comparison: "
[1] 4
[1] "Initialized sce"
[1] 13108  4966
         A        A_H        A_I          B          C          D          E 
       177          2         22        733        547        387        831 
         G          H        H_K          I          K unassigned 
       749        829         96        255        176        162 
SA1035X4XB02879 SA1035X5XB03015 SA1035X5XB03021 SA1035X6XB03211 SA1035X6XB03216 
             80             316             439             558            1073 
SA1035X7XB03338 SA1035X7XB03502 SA1035X8XB03425 SA1035X8XB03631 
            841             614             374             671 
[1] "Observed sce: "
[1] "Removing mito and ribo genes: 13108_4966"
[1] 562
[1] 13108   562
[1] 10171
[1] 9976
[1] "Filtering data..."
[1] "Create DGE edgeR object..."
[1] "DE Analysis..."
[1] "Generate output..."
[1] "With FDR<0.01 and PValue<0.05, number of significant genes is: "
[1] 3061    7
[1] "With threshold logFC>0.25, number of significant genes is: "
[1] 3058
[1] 573
[1] 13108   573
[1] 11098
[1] 9976
[1] "Filtering data..."
[1] "Create DGE edgeR object..."
[1] "DE Analysis..."
[1] "Generate output..."
[1] "With FDR<0.01 and PValue<0.05, number of significant genes is: "
[1] 3443    7
[1] "With threshold logFC>0.25, number of significant genes is: "
[1] 3435
[1] 573
[1] 13108   573
[1] 9670
[1] 9936
[1] "Filtering data..."
[1] "Create DGE edgeR object..."
[1] "DE Analysis..."
[1] "Generate output..."
[1] "With FDR<0.01 and PValue<0.05, number of significant genes is: "
[1] 2224    7
[1] "With threshold logFC>0.25, number of significant genes is: "
[1] 2211
[1] 487
[1] 13108   487
[1] 10615
[1] 9936
[1] "Filtering data..."
[1] "Create DGE edgeR object..."
[1] "DE Analysis..."
[1] "Generate output..."
[1] "With FDR<0.01 and PValue<0.05, number of significant genes is: "
[1] 3589    7
[1] "With threshold logFC>0.25, number of significant genes is: "
[1] 3574
> 
> proc.time()
   user  system elapsed 
190.332   2.824 193.134 
