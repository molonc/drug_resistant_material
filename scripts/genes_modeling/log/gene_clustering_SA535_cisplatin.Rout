
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

>   script_dir <- '/home/htran/Projects/farhia_project/rscript/genes_modeling/'
>   source(paste0(script_dir, "gene_utils.R"))
Warning message:
replacing previous import ‘vctrs::data_frame’ by ‘tibble::data_frame’ when loading ‘dplyr’ 
>   
>   base_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
>   save_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/SA535_total_rna_v2/gene_regression_cis/'
>   datatag <- 'SA535'
>   obs_clones <- c('S','T')
>   # clone_aware <- FALSE
>   clone_aware <- TRUE
>   obs_treatment_st <- c('UUT','UUTT','UUTTT','UUTTTT','UUTTTTT')
>   # input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results'
>   dir.create(save_dir, recursive = T, showWarnings = F)
>   # Define clone R: R, clone S: H
>   # Read csv files of DE genes
>   de_x3 = read.csv(paste0(base_dir,'SA535_total_rna_v2/SA535-v6/SA535_UUTTT_S_T_UUUUU_J/signif_genes.csv'))
>   # de_x4 = read.csv(paste0(base_dir,'SA535_total_rna_v2/SA535-v6/SA535_UUTTT_T_UUUUU_J/signif_genes.csv'))
>   dim(de_x3)
[1] 9529   15
>   # dim(de_x4)
>   
>   
>   
>   # de_x3 <- get_top_up_genes(de_x3, ntop = 500)
>   # de_x4 <- get_top_up_genes(de_x4, ntop = 500)
>   # print(dim(de_x3))
>   sce <- readRDS(paste0(base_dir,'rnaseq_v6/SA535-v6/sce_cis_clones.rds'))
>   rownames(sce) <- rowData(sce)$ensgene
>   print(dim(sce))
[1] 13246  5858
>   sce$clone <- ifelse(sce$clone=='TRUE','T',sce$clone)
>   # sum(sce$clone=='TRUE')
>   print(summary(as.factor(sce$clone)))
         I        I_L          J          K          L          P          Q 
      1042       1402        412        123        265        298        276 
         R          S          T          U unassigned 
       129        433       1197        115        166 
>   # Select only resistant genes 
>   # For testing, get top genes first
>   # observed_genes <- intersect(de_x3$ensembl_gene_id, de_x4$ensembl_gene_id)
>   observed_genes <- de_x3$ensembl_gene_id
>   observed_genes <- intersect(observed_genes, rownames(sce))
>   length(observed_genes)
[1] 9529
>   # de_x3 <- de_x3[de_x3$ensembl_gene_id %in% observed_genes,]
>   de_x3 <- de_x3 %>%
+     dplyr::filter(ensembl_gene_id %in% observed_genes)
>   print(dim(de_x3))
[1] 9529   15
>   de_x3 <- get_top_up_genes(de_x3, ntop = 500)
>   observed_genes <- as.character(de_x3$ensembl_gene_id)
>   
>   print(paste0("Number of observed genes: ", length(observed_genes)))
[1] "Number of observed genes: 500"
>   observed_sce <- sce[observed_genes,]
>   # rownames(sce)[1:3]
>   # unique(observed_sce$clone)
>   # dim(observed_sce)
>   # summary(as.factor(observed_sce$treatmentSt))
>   
>   
>   
>   meta_cells_df <- as.data.frame(colData(observed_sce))
>   meta_cells_df$cell_id <- rownames(meta_cells_df)
>   meta_cells_df$treatmentSt <- get_treatment_status(meta_cells_df$series)
>   print(unique(meta_cells_df$treatmentSt))
[1] "UUT"    "UUTT"   "UUTU"   "UUTTT"  "UUTTU"  "UUTTTT" "UUTTTU"
>   print(summary(as.factor(meta_cells_df$clone)))
         I        I_L          J          K          L          P          Q 
      1042       1402        412        123        265        298        276 
         R          S          T          U unassigned 
       129        433       1197        115        166 
>   if(clone_aware){
+     print("With clone aware")
+     meta_cells_df <- meta_cells_df %>%
+       dplyr::filter(clone %in% obs_clones & treatmentSt %in% obs_treatment_st)
+     
+   }else{
+     print("Without clone aware")
+     meta_cells_df <- meta_cells_df %>%
+       dplyr::filter(treatmentSt %in% obs_treatment_st)
+   }
[1] "With clone aware"
>   print(dim(meta_cells_df))
[1] 932  79
>   # meta_cells_df <- downsample_cells(meta_cells_df, downsample_ratio=0.3,
>   #                              thres_small_clone=500)
>   # colnames(meta_cells_df)
>   dim(meta_cells_df)
[1] 932  79
>   # meta_cells_df$timepoint[1:3]
>   meta_cells_df <- meta_cells_df %>%
+     dplyr::select(cell_id, treatmentSt, timepoint, clone) %>%
+     dplyr::mutate(treatment_status=paste0(timepoint,'_',treatmentSt))
>   
>   observed_sce <- observed_sce[,meta_cells_df$cell_id]
>   # View(rowData(observed_sce))
>   norm_data <- logcounts(observed_sce)
>   norm_data <- as.data.frame(as.matrix(norm_data))
>   norm_data$gene <- rowData(observed_sce)$Symbol
>   dim(norm_data)
[1] 500 933
>   
>   
>   meta_genes <- data.frame(gene=rowData(observed_sce)$Symbol, ens_gene=rownames(observed_sce), stringsAsFactors=F)
>   rownames(de_x3) <- de_x3$ensembl_gene_id
>   de_x3 <- de_x3[meta_genes$ens_gene,c("logFC","ensembl_gene_id")]
>   dim(de_x3)
[1] 500   2
>   colnames(de_x3)[which(names(de_x3)=='logFC')] <- 'logFC_UUTTT_S_T_UUUUU_J'
>   
>   
>   meta_genes <- meta_genes %>% left_join(de_x3, by=c('ens_gene'='ensembl_gene_id'))
>   
>   gene_clustering(meta_genes, norm_data, meta_cells_df, obs_clones, 
+                   save_dir, datatag, TRUE)
`summarise()` regrouping output by 'gene' (override with `.groups` argument)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-0.812428 -0.116471 -0.023175 -0.004067  0.103929  0.970276 
[1] "Compute distance matrix:"
[1] "Gene Regression:"
x being coerced from class: matrix to data.table
  1   2   3   4   5 
107  38  57  99 199 
[1] "Plot gene clusters:"
[1] 1500    7
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-0.812428 -0.116471 -0.023175 -0.004067  0.103929  0.970276 
[1] "Gene Regression:"
[1] "Observe clone: 4"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.2072 -0.6696 -0.3210  0.6115  8.2706 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               -0.230750   0.009129  -25.27   <2e-16 ***
treatment_statusX8_UUTTT   0.210823   0.011377   18.53   <2e-16 ***
treatment_statusX9_UUTTTT  0.284555   0.010008   28.43   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9951 on 92265 degrees of freedom
Multiple R-squared:  0.008806,	Adjusted R-squared:  0.008784 
F-statistic: 409.8 on 2 and 92265 DF,  p-value: < 2.2e-16

[1] "Cluster 4 and gene type is: mono_incrc"
[1] " "
[1] "Observe clone: 1"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.3905 -0.6570 -0.3153  0.5001  9.5789 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               -0.133825   0.008700 -15.383  < 2e-16 ***
treatment_statusX8_UUTTT   0.431445   0.010841  39.796  < 2e-16 ***
treatment_statusX9_UUTTTT  0.052271   0.009537   5.481 4.24e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9858 on 99721 degrees of freedom
Multiple R-squared:  0.02721,	Adjusted R-squared:  0.02719 
F-statistic:  1394 on 2 and 99721 DF,  p-value: < 2.2e-16

[1] "Cluster 1 and gene type is: mono_incrc"
[1] " "
[1] "Observe clone: 5"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.6019 -0.6308 -0.3786  0.5276 10.3126 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               -0.156427   0.006433  -24.32   <2e-16 ***
treatment_statusX8_UUTTT   0.328621   0.008017   40.99   <2e-16 ***
treatment_statusX9_UUTTTT  0.125175   0.007052   17.75   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9941 on 185465 degrees of freedom
Multiple R-squared:  0.01069,	Adjusted R-squared:  0.01068 
F-statistic:  1002 on 2 and 185465 DF,  p-value: < 2.2e-16

[1] "Cluster 5 and gene type is: mono_incrc"
[1] " "
[1] "Observe clone: 2"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-5.2176 -0.6445 -0.2234  0.5093  9.4444 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               -0.102858   0.014568  -7.060 1.69e-12 ***
treatment_statusX8_UUTTT   0.423462   0.018155  23.325  < 2e-16 ***
treatment_statusX9_UUTTTT  0.006676   0.015970   0.418    0.676    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9838 on 35413 degrees of freedom
Multiple R-squared:  0.03123,	Adjusted R-squared:  0.03118 
F-statistic: 570.9 on 2 and 35413 DF,  p-value: < 2.2e-16

[1] "Cluster 2 and gene type is: mono_incrc"
[1] " "
[1] "Observe clone: 3"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.8261 -0.5830 -0.3641  0.3488  9.0069 

Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
(Intercept)               -0.10501    0.01200  -8.752  < 2e-16 ***
treatment_statusX8_UUTTT   0.32123    0.01495  21.485  < 2e-16 ***
treatment_statusX9_UUTTTT  0.04733    0.01315   3.599  0.00032 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9922 on 53121 degrees of freedom
Multiple R-squared:  0.01444,	Adjusted R-squared:  0.01441 
F-statistic: 389.3 on 2 and 53121 DF,  p-value: < 2.2e-16

[1] "Cluster 3 and gene type is: mono_incrc"
[1] " "
> 
> proc.time()
   user  system elapsed 
 44.300   1.358  43.681 
