
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> script_dir <- '/home/htran/Projects/farhia_project/rscript/genes_modeling/'
> source(paste0(script_dir, "gene_utils.R"))
Warning message:
replacing previous import ‘vctrs::data_frame’ by ‘tibble::data_frame’ when loading ‘dplyr’ 
> 
> base_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
> save_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/SA535_total_rna_v2/gene_regression_cx/'
> datatag <- 'SA535'
> obs_clones <- c('U')
> # clone_aware <- FALSE
> clone_aware <- TRUE
> obs_treatment_st <- c('UX','UXX','UXXX','UXXXX','UXXXXX')
> # input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results'
> dir.create(save_dir, recursive = T, showWarnings = F)
> # Define clone R: R, clone S: H
> # Read csv files of DE genes
> de_x3 = read.csv(paste0(base_dir,'SA535_total_rna_v2/SA535-v6/SA535_UXXXX_U_UUUUU_J/signif_genes.csv'))
> # de_x4 = read.csv(paste0(base_dir,'SA535_total_rna_v2/SA535-v6/SA535_UUTTT_T_UUUUU_J/signif_genes.csv'))
> dim(de_x3)
[1] 9511   15
> # dim(de_x4)
> 
> 
> 
> # de_x3 <- get_top_up_genes(de_x3, ntop = 500)
> # de_x4 <- get_top_up_genes(de_x4, ntop = 500)
> # print(dim(de_x3))
> sce <- readRDS(paste0(base_dir,'rnaseq_v6/SA535-v6/sce_cx_clones.rds'))
> rownames(sce) <- rowData(sce)$ensgene
> print(dim(sce))
[1] 13246  8897
> sce$clone <- ifelse(sce$clone=='TRUE','T',sce$clone)
> # sum(sce$clone=='TRUE')
> print(summary(as.factor(sce$clone)))
         K          L          M          N          O          R          T 
       419        301        190        363        509       4500        762 
         U unassigned 
      1845          8 
> # Select only resistant genes 
> # For testing, get top genes first
> # observed_genes <- intersect(de_x3$ensembl_gene_id, de_x4$ensembl_gene_id)
> observed_genes <- de_x3$ensembl_gene_id
> observed_genes <- intersect(observed_genes, rownames(sce))
> length(observed_genes)
[1] 9511
> # de_x3 <- de_x3[de_x3$ensembl_gene_id %in% observed_genes,]
> de_x3 <- de_x3 %>%
+   dplyr::filter(ensembl_gene_id %in% observed_genes)
> print(dim(de_x3))
[1] 9511   15
> de_x3 <- get_top_up_genes(de_x3, ntop = 500)
> observed_genes <- as.character(de_x3$ensembl_gene_id)
> 
> print(paste0("Number of observed genes: ", length(observed_genes)))
[1] "Number of observed genes: 500"
> observed_sce <- sce[observed_genes,]
> # rownames(sce)[1:3]
> # unique(observed_sce$clone)
> # dim(observed_sce)
> # summary(as.factor(observed_sce$treatmentSt))
> 
> 
> 
> meta_cells_df <- as.data.frame(colData(observed_sce))
> meta_cells_df$cell_id <- rownames(meta_cells_df)
> meta_cells_df$treatmentSt <- get_treatment_status(meta_cells_df$series)
> print(unique(meta_cells_df$treatmentSt))
[1] "UX"      "UXX"     "UXU"     "UXXXX"   "UXXXU"   "UUTTTTT" "UUTTTTU"
[8] "UXXU"    "UXXXXU" 
> print(summary(as.factor(meta_cells_df$clone)))
         K          L          M          N          O          R          T 
       419        301        190        363        509       4500        762 
         U unassigned 
      1845          8 
> if(clone_aware){
+   print("With clone aware")
+   meta_cells_df <- meta_cells_df %>%
+     dplyr::filter(clone %in% obs_clones & treatmentSt %in% obs_treatment_st)
+   
+ }else{
+   print("Without clone aware")
+   meta_cells_df <- meta_cells_df %>%
+     dplyr::filter(treatmentSt %in% obs_treatment_st)
+ }
[1] "With clone aware"
> print(dim(meta_cells_df))
[1] 581  79
> # meta_cells_df <- downsample_cells(meta_cells_df, downsample_ratio=0.3,
> #                              thres_small_clone=500)
> # colnames(meta_cells_df)
> dim(meta_cells_df)
[1] 581  79
> # meta_cells_df$timepoint[1:3]
> meta_cells_df <- meta_cells_df %>%
+   dplyr::select(cell_id, treatmentSt, timepoint, clone) %>%
+   dplyr::mutate(treatment_status=paste0(timepoint,'_',treatmentSt))
> 
> observed_sce <- observed_sce[,meta_cells_df$cell_id]
> # View(rowData(observed_sce))
> norm_data <- logcounts(observed_sce)
> norm_data <- as.data.frame(as.matrix(norm_data))
> norm_data$gene <- rowData(observed_sce)$Symbol
> dim(norm_data)
[1] 500 582
> 
> 
> meta_genes <- data.frame(gene=rowData(observed_sce)$Symbol, ens_gene=rownames(observed_sce), stringsAsFactors=F)
> rownames(de_x3) <- de_x3$ensembl_gene_id
> de_x3 <- de_x3[meta_genes$ens_gene,c("logFC","ensembl_gene_id")]
> dim(de_x3)
[1] 500   2
> colnames(de_x3)[which(names(de_x3)=='logFC')] <- 'logFC_UXXXX_U_UUUUU_J'
> 
> 
> meta_genes <- meta_genes %>% left_join(de_x3, by=c('ens_gene'='ensembl_gene_id'))
> 
> gene_clustering(meta_genes, norm_data, meta_cells_df, obs_clones, 
+                 save_dir, datatag, TRUE)
`summarise()` regrouping output by 'gene' (override with `.groups` argument)
      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. 
-4.625e-16 -3.495e-17 -1.280e-18 -1.158e-18  3.066e-17  4.787e-16 
[1] "Compute distance matrix:"
[1] "Gene Regression:"
x being coerced from class: matrix to data.table
  1   2   3   4 
112 200 154  34 
[1] "Plot gene clusters:"
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
[1] 500   7
      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. 
-4.625e-16 -3.495e-17 -1.280e-18 -1.158e-18  3.066e-17  4.787e-16 
[1] "Gene Regression:"
[1] "Observe clone: 3"
Error in `contrasts<-`(`*tmp*`, value = contr.funs[1 + isOF[nn]]) : 
  contrasts can be applied only to factors with 2 or more levels
Calls: gene_clustering ... model.matrix -> model.matrix.default -> contrasts<-
Execution halted
