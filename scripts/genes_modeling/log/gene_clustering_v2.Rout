
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>     script_dir <- '/home/htran/Projects/farhia_project/rscript/genes_modeling/'
>     source(paste0(script_dir, "gene_utils.R"))
Warning message:
replacing previous import ‘vctrs::data_frame’ by ‘tibble::data_frame’ when loading ‘dplyr’ 
>     
>     base_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
>     save_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/SA609_rna/gene_regression/'
>     datatag <- 'SA609'
>     obs_clones <- c('R')
>     # clone_aware <- FALSE
>     clone_aware <- TRUE
>     obs_treatment_st <- c('UT','UTT','UTTT','UTTTT','UTTTTT')
>     # input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results'
>     dir.create(save_dir, recursive = T)
Warning message:
In dir.create(save_dir, recursive = T) :
  '/home/htran/storage/datasets/drug_resistance/rna_results/SA609_rna/gene_regression' already exists
>     # Define clone R: R, clone S: H
>     # Read csv files of DE genes
>     de_x3 = read.csv(paste0(base_dir,'SA609_rna/deg_analysis/SA609-v6/SA609_UTTT_R_UUUU_H/signif_genes.csv'))
>     de_x4 = read.csv(paste0(base_dir,'SA609_rna/deg_analysis/SA609-v6/SA609_UTTTT_R_UUUUU_H/signif_genes.csv'))
>     
>     
>     
>     # de_x3 <- get_top_up_genes(de_x3, ntop = 500)
>     # de_x4 <- get_top_up_genes(de_x4, ntop = 500)
>     # print(dim(de_x3))
>     sce <- readRDS(paste0(base_dir,'rnaseq_v6/SA609-v6/total_sce_clones.rds'))
>     print(dim(sce))
[1] 12324 33817
>     # Select only resistant genes 
>     # For testing, get top genes first
>     observed_genes <- intersect(de_x3$ensembl_gene_id, de_x4$ensembl_gene_id)
>     observed_genes <- intersect(observed_genes, rownames(sce))
>     length(observed_genes)
[1] 4338
>     # de_x3 <- de_x3[de_x3$ensembl_gene_id %in% observed_genes,]
>     de_x3 <- de_x3 %>%
+              dplyr::filter(ensembl_gene_id %in% observed_genes)
>     print(dim(de_x3))
[1] 4338   15
>     de_x3 <- get_top_up_genes(de_x3, ntop = 500)
>     observed_genes <- as.character(de_x3$ensembl_gene_id)
>     
>     print(paste0("Number of observed genes: ", length(observed_genes)))
[1] "Number of observed genes: 500"
>     observed_sce <- sce[observed_genes,]
>     # rownames(sce)[1:3]
>     # unique(observed_sce$clone)
>     # dim(observed_sce)
>     # summary(as.factor(observed_sce$treatmentSt))
>     
>     
>     
>     meta_cells_df <- as.data.frame(colData(observed_sce))
>     meta_cells_df$cell_id <- rownames(meta_cells_df)
>     if(clone_aware){
+       print("With clone aware")
+       meta_cells_df <- meta_cells_df %>%
+         dplyr::filter(clone %in% obs_clones & treatmentSt %in% obs_treatment_st)
+       print(dim(meta_cells_df))
+     }else{
+       print("Without clone aware")
+       meta_cells_df <- meta_cells_df %>%
+         dplyr::filter(treatmentSt %in% obs_treatment_st)
+       print(dim(meta_cells_df))
+     }
[1] "With clone aware"
[1] 7765   79
>     
>     meta_cells_df <- downsample_cells(meta_cells_df, downsample_ratio=0.3,
+                                  thres_small_clone=500)
[1] "Extract 404 from treatment st: UT"
[1] "Extract 714 from treatment st: UTT"
[1] "Extract 914 from treatment st: UTTT"
[1] "Extract 580 from treatment st: UTTTT"
[1] 2612
>     # colnames(meta_cells_df)
>     dim(meta_cells_df)
[1] 2612   79
>     # meta_cells_df$timepoint[1:3]
>     meta_cells_df <- meta_cells_df %>%
+       dplyr::select(cell_id, treatmentSt, timepoint, clone) %>%
+       dplyr::mutate(treatment_status=paste0(timepoint,'_',treatmentSt))
>     
>     observed_sce <- observed_sce[,meta_cells_df$cell_id]
>     # View(rowData(observed_sce))
>     norm_data <- logcounts(observed_sce)
>     norm_data <- as.data.frame(as.matrix(norm_data))
>     norm_data$gene <- rowData(observed_sce)$Symbol
>     dim(norm_data)
[1]  500 2613
>    
>    
>     gene_clustering(norm_data, meta_cells_df, obs_clones, 
+                     save_dir, datatag, TRUE)
`summarise()` regrouping output by 'gene' (override with `.groups` argument)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-1.275411 -0.118550  0.007678 -0.017485  0.121910  0.894559 
[1] "Compute distance matrix:"
[1] "Gene Regression:"
  1   2   3 
163 266  71 
[1] "Plot gene clusters:"
[1] 2000    5
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-1.275411 -0.118550  0.007678 -0.017485  0.121910  0.894559 
[1] "Gene Regression:"
[1] "Observe clone: 1"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.3428 -0.8893  0.0889  0.7135  6.1839 

Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
(Intercept)              -0.342173   0.003853  -88.81   <2e-16 ***
treatment_statusX5_UTT    0.441016   0.004821   91.47   <2e-16 ***
treatment_statusX6_UTTT   0.397904   0.004627   86.00   <2e-16 ***
treatment_statusX7_UTTTT  0.371011   0.005019   73.93   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9887 on 425752 degrees of freedom
Multiple R-squared:  0.02206,	Adjusted R-squared:  0.02205 
F-statistic:  3201 on 3 and 425752 DF,  p-value: < 2.2e-16

[1] "Observe clone: 2"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-5.2816 -0.9334  0.0697  0.7314  6.1398 

Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
(Intercept)               0.044687   0.003033   14.73   <2e-16 ***
treatment_statusX5_UTT    0.080839   0.003796   21.30   <2e-16 ***
treatment_statusX6_UTTT  -0.057035   0.003643  -15.66   <2e-16 ***
treatment_statusX7_UTTTT -0.210880   0.003951  -53.37   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9944 on 694788 degrees of freedom
Multiple R-squared:  0.01081,	Adjusted R-squared:  0.0108 
F-statistic:  2530 on 3 and 694788 DF,  p-value: < 2.2e-16

[1] "Observe clone: 3"

Call:
lm(formula = exp_scaled ~ treatment_status, data = tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-6.3922 -0.5480  0.1200  0.6555  5.9426 

Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
(Intercept)               0.109906   0.005667  19.394  < 2e-16 ***
treatment_statusX5_UTT    0.040922   0.007091   5.771 7.91e-09 ***
treatment_statusX6_UTTT   0.055689   0.006805   8.183 2.78e-16 ***
treatment_statusX7_UTTTT -0.633090   0.007381 -85.769  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9598 on 185448 degrees of freedom
Multiple R-squared:  0.07849,	Adjusted R-squared:  0.07848 
F-statistic:  5265 on 3 and 185448 DF,  p-value: < 2.2e-16

[1] "Plot gene important clusters:"
Error in (function (...)  : no arguments where at least one expected
Calls: gene_clustering ... <Anonymous> -> align_plots -> do.call -> <Anonymous>
Execution halted
