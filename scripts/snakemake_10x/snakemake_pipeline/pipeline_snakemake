import os

## Tickets & Libraries for analysis
library = config["library"]
MAX_MITO = config["max_mito"]
MAX_RIBO = config["max_ribo"]
MIN_FEATURES = config["min_features"]
DOUBLET_SCORE = config["doublet_score"]
##PROBSEG = config["probIdx"]

##P_ADJUST = config["p_adjust"]
##MIN_LOGFC = config["min_logfc"]
RES = config["resolution"]

SOURCE_DIR = os.path.join(config['project_10x_dir'], 'pipeline')

rule all:
    """
    Launches full snakemake pipeline, cleans up junk files at the end.
    """
    input:
        os.path.join(config['results_10x_dir'], 'normalized', 'samples.rds')
        
   
## Previous version: script_tenx_human.py     
if config["download_data"]:
    rule download_data:
        """
        Runs a shell script that downloads all the data for corruptTree
        """
        params:
            download_dir = os.path.join(config['download_10x_dir'])
        output:
            directory(os.path.join(config['download_10x_dir'], '{library}'))
        shell:
            'python {SOURCE_DIR}/utils/download_10x_human.py '
            '--library_id {wildcards.library} '
            '--download_dir {params.download_dir}'


if config["merge_data"]:
    rule merge_data:
        """
        do nothing, just keep it here to run snakemake process of downloading data
        """
        input:
            expand(os.path.join(config['download_10x_dir'], '{library}'), library=library)
        output:
            os.path.join(config['download_10x_dir'], 'SA535_human_download_log.csv')
        shell:
            'python {SOURCE_DIR}/utils/lib_info.py {input} {output}'
            
        
if config["filter_data"]:  
    rule filter_data:
        """
        Filtering data, qualification control
        """
        params:
            library_id=lambda wildcards: config['library'][wildcards.library]['library_id']
        input:
            os.path.join(config['download_10x_dir'],'{library}','{library}.rdata')
        output:
            os.path.join(config['results_10x_dir'], 'filtered','{library}_filtered.rds')
        shell:
            'Rscript {SOURCE_DIR}/utils/qc_filtering.R '
            '--input_file {input} '
            '--output_file {output} '
            '--library_id {params.library_id} '
            '--max_mito {MAX_MITO} '
            '--max_ribo {MAX_RIBO} '
            '--min_features {MIN_FEATURES} '
    
     
            
   
if config["cell_cycle_detection"]:  
    rule cell_cycle_detection:
        """
        cell cycle detection
        """
        input:
            os.path.join(config['results_10x_dir'],'filtered','{library}_filtered.rds')
        output:
            os.path.join(config['results_10x_dir'], 'cell_cycle','{library}_assignments.rds')
        shell:
            'Rscript {SOURCE_DIR}/utils/cell_cycle_detection.R --sce {input} --output_file {output}'



if config["identify_doublets"]:  
    rule identify_doublets:
        """
        Detect doubet cells using package rscrublet, version 0.1.0
        """
        params:
            library_id=lambda wildcards: config['library'][wildcards.library]['library_id'],
            summary_csv=os.path.join(config['results_10x_dir'], 'filtered','{library}_qc.csv'),
            output_csv=os.path.join(config['results_10x_dir'], 'filtered','{library}_doublet_filtered.csv')
        input:
            os.path.join(config['results_10x_dir'],'{library}','{library}_filtered.rds')
        output:
            os.path.join(config['results_10x_dir'], 'filtered','{library}_doublet_filtered.rds')
        shell:
            'Rscript {SOURCE_DIR}/utils/identify_doublet_v2.R '
            '--sce_file {input} '
            '--sce_output {output} '
            '--library_id {params.library_id} '
            '--doublet_score {DOUBLET_SCORE} '
            '--output_csv {params.output_csv} '
            '--summary_csv {params.summary_csv} '
     
if config["mutation_detection"]:  
    rule mutation_detection:
        """
        Detect mouse cells that are mixed with human cells, xenograft experiment
        """
        params:
            library_id=lambda wildcards: config['library'][wildcards.library]['library_id'],
            sce_mouse=os.path.join(config['download_10x_dir'],'mouse','{library}','{library}.rdata'),
            output_figure=os.path.join(config['results_10x_dir'], 'filtered','{library}_mouse_filtered.png'),
            output_csv=os.path.join(config['results_10x_dir'], 'filtered','{library}_mouse_filtered.csv'),
            summary_results_csv=os.path.join(config['results_10x_dir'], 'filtered','{library}_qc.csv'),
        input:
            os.path.join(config['results_10x_dir'],'{library}','{library}_filtered.rds')
        output:
            os.path.join(config['results_10x_dir'], 'filtered','{library}_mouse_filtered.rds')
        shell:
            'Rscript {SOURCE_DIR}/utils/identify-murine_v2.R '
            '--sce_human {input} '
            '--output_sce {output} '
            '--library_id {params.library_id} '
            '--sce_mouse {params.sce_mouse} '
            '--output_figure {params.output_figure} '
            '--output_csv {params.output_csv} '
            '--summary_results_csv {params.summary_results_csv} '
            
            
if config["merge_filter_data"]:  
    rule merge_filter_data:
        """
        do nothing, just keep it here to run snakemake
        """
        input:
            expand(os.path.join(config['results_10x_dir'],'cell_cycle','{library}_assignments.rds'), library=library)
        output:
            os.path.join(config['results_10x_dir'], 'SA535_10x_filtering_log.csv')
        shell:
            'python {SOURCE_DIR}/utils/lib_info.py {input} {output}'
    
    
if config["verification_qc"]:        
    rule verification:
        """
        Verifying the QC output for this project data series
        """
        params:
            library_ids = ",".join(list(library.keys())),
            input_dir = os.path.join(config['download_10x_dir'],'human')
        output:
            os.path.join(config['results_10x_dir'], 'filtered', 'summary_SA1035.csv')
        shell:
            'Rscript {SOURCE_DIR}/utils/qc_verification.R -l {params.library_ids} -i {params.input_dir} -o {output}'        
   

if config["normalize_data"]:        
    rule normalization:
        """
        Twice scran normalization, for each library, normalize data first get normcounts matrix, then combine data together, and normalize it second time, get logcounts matrix
        """
        params:
            library_ids = ",".join(list(library.keys())),
            input_dir = os.path.join(config['results_10x_dir'],'filtered')
        output:
            os.path.join(config['results_10x_dir'], 'normalized', 'SA535_cys_normalized_output.rds')
        shell:
            'Rscript {SOURCE_DIR}/normalize.R -l {params.library_ids} -i {params.input_dir} -o {output}'
            
            
if config["clustering_data"]:        
    rule clustering:
        """
        Do clustering using method in Seurat package
        """
        params:
            input_file = os.path.join(config['results_10x_dir'],'normalized','SA535_cys_normalized_output.rds')
        input:
            os.path.join(config['results_10x_dir'],'normalized','SA535_cys_normalized_output.rds')
        output:
            os.path.join(config['results_10x_dir'], 'clustering', 'SA535_cys_normalized_clusters.rds')
        shell:
            'Rscript {SOURCE_DIR}/clustering.R -i {input} -o {output} -r {RES}'
        
        
if config["normalized_samples"]:        
    rule normalized_samples:
        """
        Get normalized output for each sample_id
        """
        input:
            os.path.join(config['results_10x_dir'], 'normalized', 'SA535_cys_normalized_output.rds')
        output:
            os.path.join(config['results_10x_dir'], 'normalized', 'samples.rds')
        shell:
            'Rscript {SOURCE_DIR}/divide_samples.R -i {input} -o {output}'
     
 
 if config["deg_analysis"]:        
    rule deg_analysis:
        """
        Do DE analysis using Seurat DE function, wilcox test
        """
        params:
            input_dir = config['results_dir']
        input:
            os.path.join(config['results_dir'],'clustering','SA919_sans_mito_ribo_genes.rds')
        output:
            os.path.join(config['results_dir'], 'deg_metastasis_vs_primary', 'SA919_deg_pathway.rds')
        shell:
            'Rscript {SOURCE_DIR}/deg_analysis.R -i {input} -o {output} -d {params.input_dir} -p {P_ADJUST} -m {MIN_LOGFC} -c {CLS_RM}'
            
            