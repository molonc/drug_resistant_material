
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> source(paste0("/home/htran/Projects/farhia_project/rscript/pipeline/utils/normalize_utils.R"))
> 
> input_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
> datatag <- 'SA609'
> # metacells_fn <-  paste0(input_dir,'SA609_rna/snakemake_10x/SA609_10x.csv')
> # sce <- load_sce(metacells_fn, datatag, input_dir, return_data=T)
> 
> output_dir <- paste0(input_dir,'rnaseq_v6/',datatag, '-v6/')
> 
> save_dir <- paste0(input_dir,'rnaseq_v6/normalization_evaluation/',datatag,'/')
> dir.create(save_dir)
Warning message:
In dir.create(save_dir) :
  '/home/htran/storage/datasets/drug_resistance/rna_results/rnaseq_v6/normalization_evaluation/SA609' already exists
> 
> 
> sce_fn <- paste0(input_dir,'rnaseq_v6/',datatag,'-v6/','total_sce_v3.rds')
> sce_raw <- readRDS(sce_fn)
> dim(sce_raw)
[1] 13941 33881
> 
> 
> 
> 
>   
> # rowData(sce_raw)$ID[1]
> # rowData(sce_raw)$Symbol[1]
> 
> 
> res <- plot_raw_variance(sce_raw, save_dir)
[1] "Output exist in folder, reloading..."
> # plot_rawdata_qc(sce_raw, save_dir, datatag)
> 
> output_dir <- paste0(input_dir,'rnaseq_v6/',datatag, '-v6/')
> dir.create(output_dir)
Warning message:
In dir.create(output_dir) :
  '/home/htran/storage/datasets/drug_resistance/rna_results/rnaseq_v6/SA609-v6' already exists
> 
> 
> print("Twice scran normalization")
[1] "Twice scran normalization"
> source(paste0("/home/htran/Projects/farhia_project/rscript/pipeline/utils/twice_scran_normalization_corrected.R"))
> # sce_scran <- twice_scran_normalize_v2(sce_raw, input_dir, output_dir, datatag, return_data=F)
> sce_scran <- readRDS(paste0(output_dir, datatag, '_twice_scran_normalized_v3.rds'))
> dim(sce_scran)
[1] 13941 33881
> 
> print("Seurat normalization")
[1] "Seurat normalization"
> # sce_seurat <- normalize_Seurat(sce_raw, input_dir, output_dir, datatag, return_data=F)
> sce_seurat <- readRDS(paste0(output_dir, datatag, '_seurat_normalized_v3.rds'))
> dim(sce_seurat)
[1] 13941 33881
> 
> # print("SCTransform normalization")
> # normalize_SCTransform(sce, output_dir, datatag, return_data=F)
> sce_transform <- readRDS(paste0(output_dir, datatag,'_sctransform_normalized.rds'))
> dim(sce_transform)
[1] 13941 33881
> # cond <- sce_transform$treatmentSt %in% c('UTTTT', 'UUUUU') & sce_transform$clone %in% c('R', 'H')
> # sce <- sce_transform[,cond]
> # de_desc <- 'SA609: UTTTT-A vs UUUUU-H'
> # # eval_edgeR(sce, vol_609, de_genes, de_desc, datatag, save_dir)
> # base_dir <- '/home/htran/storage/datasets/drug_resistance/rna_results/'
> # de_genes <- read.csv(paste0(base_dir,'SA609_rna/deg_analysis/SA609-v6/SA609_UTTTT_R_UUUUU_H/signif_genes.csv'), check.names = F, stringsAsFactors = F)
> # # p609 <- eval_edgeR(sce, de_genes, de_desc, datatag, save_dir)
> # 
> # treatmentSts <- c('UTTTT', 'UUUUU')
> # clones <- c('R', 'H')
> # desc <- '(X7-Rx A - X7-UnRx H)'
> # # c_609 <- eval_edgeR_v2(sce, de_genes, treatmentSts, clones, de_desc, desc, datatag, save_dir)
> # rc_609 <- eval_edgeR_counts(sce_raw, de_genes, treatmentSts, clones, paste0('raw data ',de_desc), 
> #                             desc, datatag, save_dir)
> # sce_scMerge <- readRDS(paste0(output_dir, datatag,'_corrected_scMerge.rds'))
> # dim(sce_scMerge)
> 
> metacells_fn <-  paste0(input_dir,'SA609_rna/snakemake_10x/SA609_10x.csv')
> sample_df <- read.csv(metacells_fn, stringsAsFactors = F, check.names = F)
> print(dim(sample_df))
[1] 15 11
> sample_df <- sample_df %>%
+   dplyr::select(mouse_id, batch_info) %>%
+   dplyr::rename(batch=batch_info)
> 
> rownames(sample_df) <- sample_df$mouse_id
> sce_raw$batch <- 'None'
> sce_raw$batch <- sample_df[sce_raw$sample,'batch']
> # sce_raw$series <- paste0(sce_raw$series,'_',gsub("CHIP0","C",sce_raw$batch))
> summary(as.factor(sce_raw$batch))
CHIP0063 CHIP0068 CHIP0069 CHIP0146 CHIP0150 CHIP0152 CHIP0163 CHIP0172 
     274     4869      600     2773     5031     4891     4306     4193 
CHIP0181 CHIP0208 
    5168     1776 
> sce_scran$batch <- sample_df[sce_scran$sample,'batch']
> # sce_scran$series <- paste0(sce_scran$series,'_',gsub("CHIP0","C",sce_scran$batch))
> 
> sce_seurat$batch <- sample_df[sce_seurat$sample,'batch']
> # sce_seurat$series <- paste0(sce_seurat$series,'_',gsub("CHIP0","C",sce_seurat$batch))
> 
> sce_transform$batch <- sample_df[sce_transform$sample,'batch']
> # sce_transform$series <- paste0(sce_transform$series,'_',gsub("CHIP0","C",sce_transform$batch))
> 
> 
> unique(sce_transform$series)
 [1] "X3-U"     "X4-UU"    "X4-UT"    "X5-UTU"   "X5-UTT"   "X5-UUU"  
 [7] "X6-UTTU"  "X6-UTTT"  "X6-UUUU"  "X7-UTTTU" "X7-UTTTT" "X7-UUUUU"
> hk_ref <- res$filtered_gene_attr_HK
> hk_ref <- hk_ref %>%
+   dplyr::filter(abs(log_var)<0.2)
> stable_genes <- hk_ref$gene_id
> length(stable_genes)
[1] 512
> # length(intersect(stable_genes,rownames(sce_scMerge)))
> summary(res$filtered_gene_attr_HK$log_var)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-0.49791 -0.15121  0.07563  0.05951  0.28286  0.49926 
> metacells <- plot_batch_estimation(sce_raw, sce_scran, sce_seurat, sce_transform, stable_genes, save_dir, 
+                               datatag, 'HK', T, c(0.2,1.7))
[1] 512
[1]   512 33881
[1] 512
[1]   512 33881
[1] 512
[1]   512 33881
[1] 512
[1]   512 33881
[1] 135524     10
> 
> dim(metacells)
[1] 135524     10
> p_hk <- plot_batch_effects(metacells, xstring="series", ystring="mean_exp", 
+                                plottype="batch_label", plottitle=paste0(datatag,"\nNormalization Evaluation"),
+                                xlabel=NULL, ylabel=paste0(length(stable_genes),' housekeeping genes average expression'),
+                                lg_pos="bottom", save_dir)
> 
> summary(as.factor(p_hk$tag))
integer(0)
> # p_hk <- plot_batch_estimation_v2(sce_scMerge, sce_raw, sce_scran, sce_seurat, sce_transform, stable_genes, save_dir, datatag, 'HK', T)
> 
> # ref <- res$filtered_gene_attr_scSEG
> # ref <- ref %>%
> #   dplyr::filter(abs(log_var)<0.2)
> # stable_genes <- ref$gene_id
> # length(stable_genes)
> # p_ref_scSEG <- plot_batch_estimation_v2(sce_scMerge, sce_raw, sce_scran, sce_seurat, sce_transform, stable_genes, save_dir, datatag, 'ref scSEG', T)
> # 
> # ref <- res$filtered_our_gene_attr_scSEG
> # ref <- ref %>%
> #   dplyr::filter(abs(log_var)<0.35)
> # stable_genes <- ref$gene_id
> # length(stable_genes)
> # 
> # p_custom_scSEG <- plot_batch_estimation_v2(sce_scMerge, sce_raw, sce_scran, sce_seurat, sce_transform, stable_genes, save_dir, datatag, 'custom scSEG', T)
> # 
> # p_total <- cowplot::plot_grid(p_hk, p_ref_scSEG, p_custom_scSEG, ncol = 3, align='hv', rel_widths = c(1.45,1.2,1.2))
> # png(paste0(save_dir,datatag,"_total_eval.png"), height = 2*970, width=2*1200,res = 2*72)
> # print(p_total)
> # dev.off()
> # 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
223.156  23.124 840.163 
Killed
